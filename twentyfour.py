# -*- coding: utf-8 -*-
"""twentyfour.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_LplpMw0RJXfGIA8JWnmdiCh0GPa3a0
"""

from itertools import permutations as p

def twentyfour(nums, target):
  np = list(p(nums))
  opl = list(p([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3], 3))
  
  eps = 0.00000001
  
  def op(n, o):
    if o == 0:
      return n[0] + n[1]
    elif o == 1:
      return n[0] - n[1]
    elif o == 2:
      return n[0] * n[1]
    elif o == 3:
      if n[1] != 0:
        return n[0] / n[1]
      else:
        return 9999999
  
  for npind in range(len(np)):
    for opind in range(len(opl)):
      
      res1 = op([np[npind][0], np[npind][1]],opl[opind][0]);
      
      resA2 = op([res1, np[npind][2]], opl[opind][1]);
      resA = op([resA2, np[npind][3]], opl[opind][2]);
      
      if abs(resA - target) <= eps:
        return ["((a $ b) $ c) $ d", np[npind], opl[opind], "+, -, *, /"]
        
      resB2 = op([np[npind][2], res1], opl[opind][1]);
      resB = op([resB2, np[npind][3]], opl[opind][2]);
      
      if abs(resB - target) <= eps:
        return ["(c $ (a $ b)) $ d", np[npind], opl[opind], "+, -, *, /"]
        
      resC2 = op([res1, np[npind][2]], opl[opind][1]);
      resC = op([np[npind][3], resC2], opl[opind][2]);
      
      if abs(resC - target) <= eps:
        return ["d $ ((a $ b) $ c)", np[npind], opl[opind], "+, -, *, /"]
        
      resD2 = op([np[npind][2], res1], opl[opind][1]);
      resD = op([np[npind][3], resD2], opl[opind][2]);
      
      if abs(resD - target) <= eps:
        return ["d $ (c $ (a $ b))", np[npind], opl[opind], "+, -, *, /"]

twentyfour([2, 3, 5, 12], 24)

